package petshop.gui;

import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.GregorianCalendar;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;
import javax.swing.JTextArea;
import javax.swing.JTextField;
import javax.swing.text.JTextComponent;
import petshop.classes.Animal;
import petshop.classes.BancoDeDados;
import petshop.classes.LetraMaiuscula;

/**
 *
 * @author arthur
 */
public class JanelaAnimal extends javax.swing.JDialog {

    TipoJanela tipo;
    JanelaCliente janelaCliente;

    int index;

    /** Creates new form JanelaAnimal */
    public JanelaAnimal(JanelaCliente janelaCliente, TipoJanela tipo) {
        this.tipo = tipo;
        initComponents();

        this.janelaCliente = janelaCliente;

        this.setLocationRelativeTo(this.getContentPane());

        campoDataNasc.addKeyListener(new KeyListener() {
                    public void keyTyped(KeyEvent e) {
                        if (!((e.getKeyChar() >= KeyEvent.VK_0 &&
                               e.getKeyChar() <= KeyEvent.VK_9) ||
                              (e.getKeyChar() == KeyEvent.VK_BACK_SPACE))) {
                            e.consume(); } }
                    public void keyPressed(KeyEvent e) { }
                    public void keyReleased(KeyEvent e) { }
        });
        
        campoNome.setDocument(new LetraMaiuscula(50));
        campoRaca.setDocument(new LetraMaiuscula(50));
        areaInformacoes.setDocument(new LetraMaiuscula(400));

        reiniciar();

        if(tipo == TipoJanela.INFORMACAO){
            desabilitarCampos();
        } else if(tipo == TipoJanela.ALTERACAO){
            this.botaoAdicionar.setText("Alterar");
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jPanel1 = new javax.swing.JPanel();
        campoNome = new javax.swing.JTextField();
        campoRaca = new javax.swing.JTextField();
        comboEspecie = new javax.swing.JComboBox();
        botaoCancelar = new javax.swing.JButton();
        campoDataNasc = new javax.swing.JTextField();
        botaoAdicionar = new javax.swing.JButton();
        comboSexo = new javax.swing.JComboBox();
        scrollInformacoes = new javax.swing.JScrollPane();
        areaInformacoes = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Cadastrar Animal");
        setResizable(false);

        jPanel1.setPreferredSize(new java.awt.Dimension(470, 270));
        jPanel1.setLayout(new java.awt.GridBagLayout());

        campoNome.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                tirarEtiqueta(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                colocarEtiqueta(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 115;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 0, 10);
        jPanel1.add(campoNome, gridBagConstraints);

        campoRaca.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                tirarEtiqueta(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                colocarEtiqueta(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 80;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 0, 10);
        jPanel1.add(campoRaca, gridBagConstraints);

        comboEspecie.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "ESPÉCIE", "CÃO", "GATO", "AVE", "ROEDOR", "OUTRO" }));
        comboEspecie.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                mudarComboEspecie(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 40;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 0, 10);
        jPanel1.add(comboEspecie, gridBagConstraints);

        botaoCancelar.setText("Cancelar");
        botaoCancelar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                cancelar(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        gridBagConstraints.ipadx = 30;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        jPanel1.add(botaoCancelar, gridBagConstraints);

        campoDataNasc.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                tirarEtiqueta(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                colocarEtiqueta(evt);
            }
        });
        campoDataNasc.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                eventoDigitarData(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 40;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 0, 10);
        jPanel1.add(campoDataNasc, gridBagConstraints);

        botaoAdicionar.setText("Adicionar");
        botaoAdicionar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                cadastrar(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        gridBagConstraints.ipadx = 30;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        jPanel1.add(botaoAdicionar, gridBagConstraints);

        comboSexo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "SEXO", "MACHO", "FÊMEA" }));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 35;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 0, 10);
        jPanel1.add(comboSexo, gridBagConstraints);

        areaInformacoes.setColumns(20);
        areaInformacoes.setLineWrap(true);
        areaInformacoes.setRows(5);
        areaInformacoes.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                tirarEtiqueta(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                colocarEtiqueta(evt);
            }
        });
        scrollInformacoes.setViewportView(areaInformacoes);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 150;
        gridBagConstraints.ipady = 20;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 0, 10);
        jPanel1.add(scrollInformacoes, gridBagConstraints);

        getContentPane().add(jPanel1, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void tirarEtiqueta(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_tirarEtiqueta
        JTextComponent campo = (JTextComponent) evt.getComponent();

        if(campo.getText().equals(getEtiqueta(campo))){
            if(tipo != TipoJanela.INFORMACAO){
                campo.setText("");
            }
        }
}//GEN-LAST:event_tirarEtiqueta

    private void colocarEtiqueta(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_colocarEtiqueta
        JTextComponent campo = (JTextComponent) evt.getComponent();

        if(campo.getText().equals("")){
            campo.setText(getEtiqueta(campo));
        }
}//GEN-LAST:event_colocarEtiqueta

    private void cancelar(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cancelar
        int resp = JOptionPane.showConfirmDialog(this, "Tem certeza que deseja cancelar?", "Sair", JOptionPane.YES_NO_OPTION);

        if(resp == JOptionPane.YES_OPTION){
            this.dispose();
            reiniciar();
        }
}//GEN-LAST:event_cancelar

    private void cadastrar(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cadastrar
        if(!existemDependencias()){
            Animal animal = gerarAnimal();

            if(tipo == TipoJanela.CADASTRO) janelaCliente.adicionarAnimal(animal);
            else if(tipo == TipoJanela.ALTERACAO) janelaCliente.alterarAnimal(janelaCliente.getComboAnimais().getSelectedIndex() - 1, animal);

            this.dispose();
        }
    }//GEN-LAST:event_cadastrar

    private void eventoDigitarData(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_eventoDigitarData
        JTextField campo = (JTextField) evt.getComponent();

        if(campo.getText().length() == 10) evt.consume();

        if(evt.getKeyChar() != KeyEvent.VK_BACK_SPACE){
            if(campo.getText().length() == 2) campo.setText(campo.getText() + "/");
            else if(campo.getText().length() == 5) campo.setText(campo.getText() + "/");
        }
    }//GEN-LAST:event_eventoDigitarData

    private void mudarComboEspecie(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_mudarComboEspecie
        campoRaca.setText(getEtiqueta(campoRaca));
    }//GEN-LAST:event_mudarComboEspecie

    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new JanelaAnimal(null, TipoJanela.CADASTRO).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea areaInformacoes;
    private javax.swing.JButton botaoAdicionar;
    private javax.swing.JButton botaoCancelar;
    private javax.swing.JTextField campoDataNasc;
    private javax.swing.JTextField campoNome;
    private javax.swing.JTextField campoRaca;
    private javax.swing.JComboBox comboEspecie;
    private javax.swing.JComboBox comboSexo;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane scrollInformacoes;
    // End of variables declaration//GEN-END:variables


    
    private String getEtiqueta(JTextComponent campo){

        if(campo.equals(campoNome)) return "NOME";
        else if(campo.equals(campoDataNasc)) return "DATA DE NASCIMENTO";
        else if(campo.equals(campoRaca)){
            if(comboEspecie.getSelectedItem().equals("OUTRO")) return "QUAL?";
            else return "RAÇA";
        } else if(campo.equals(areaInformacoes)) {
            return "INFORMAÇÕES ADICIONAIS";
        }

        return "";
    }


    private void reiniciar(){

        campoNome.setText(getEtiqueta(campoNome));
        comboSexo.setSelectedIndex(0);
        comboEspecie.setSelectedIndex(0);
        campoDataNasc.setText(getEtiqueta(campoDataNasc));
        campoRaca.setText(getEtiqueta(campoRaca));
        areaInformacoes.setText(getEtiqueta(areaInformacoes));
    }

    private boolean existemDependencias(){
        String msg = "Você esqueceu de preencher os \nseguintes campos obrigatórios:\n\n";

        boolean existeDependencias = false;

        if(!dataValida(campoDataNasc.getText())){
                JOptionPane.showMessageDialog(this.getContentPane(), "A data é inválida");
                return true;
        }

        if(campoNome.getText().equals(getEtiqueta(campoNome))){ msg += "- NOME\n"; existeDependencias = true;}
        if(comboSexo.getSelectedIndex() == 0){ msg += "- SEXO\n"; existeDependencias = true;}
        if(comboEspecie.getSelectedIndex() == 0){ msg += "- ESPÉCIE\n"; existeDependencias = true;}
        if(campoRaca.getText().equals("QUAL?")){ msg += "- ESPÉCIE ESPECÍFICA\n"; existeDependencias = true;}

        if(existeDependencias) JOptionPane.showMessageDialog(this.getContentPane(), msg);
        
        return existeDependencias;
    }

    public boolean dataValida(String dateStr){
        DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
        Calendar cal = new GregorianCalendar();
        try {
            // gerando o calendar
            cal.setTime(df.parse(dateStr));
        } catch (ParseException ex) {
            Logger.getLogger(JanelaAnimal.class.getName()).log(Level.SEVERE, null, ex);
        }

        // separando os dados da string para comparacao e validacao
        String[] data = dateStr.split("/");
        String dia = data[0];
        String mes = data[1];
        String ano = data[2];

        // testando se hah discrepancia entre a data que foi
        // inserida no caledar e a data que foi passada como
        // string. se houver diferenca, a data passada era
        // invalida
        if ((new Integer(dia)).intValue() != (new Integer(cal.get(Calendar.DAY_OF_MONTH))).intValue()) {
            // dia nao casou
            return (false);
        } else if ((new Integer(mes)).intValue() != (new Integer(cal.get(Calendar.MONTH) + 1)).intValue()) {
            // mes nao casou
            return (false);
        } else if ((new Integer(ano)).intValue() != (new Integer(cal.get(Calendar.YEAR))).intValue()) {
            // ano nao casou
            return (false);
        }

        return (true);
    }


    private Animal gerarAnimal(){
        String[] d = campoDataNasc.getText().split("/");

        String nome = campoNome.getText();
        char sexo;
        if(comboSexo.getSelectedIndex() == 1) sexo = 'M';
        else sexo = 'F';
        GregorianCalendar cal = new GregorianCalendar(Integer.valueOf(d[2]),
                Integer.valueOf(d[1]),Integer.valueOf(d[0]));
        String especie = (String) comboEspecie.getSelectedItem();
        String raca = "";
        String info = "";

        if(!campoRaca.getText().equals(getEtiqueta(campoRaca)))
                raca = campoRaca.getText();
        if(!areaInformacoes.getText().equals(getEtiqueta(areaInformacoes)))
                info = areaInformacoes.getText();

        Animal a = new Animal(nome, sexo, cal, especie, raca, info);

        //se for de alteração pegue o código do animal que esta sendo alterado.
        if(tipo == TipoJanela.ALTERACAO)
            a.setCodigo(janelaCliente.getAnimais().get(janelaCliente.getComboAnimais().getSelectedIndex() - 1).getCodigo());

        return a;
    }

    private void desabilitarCampos(){
        campoNome.setEditable(false);
        comboSexo.setEnabled(false);
        campoDataNasc.setEditable(false);
        comboEspecie.setEnabled(false);
        campoRaca.setEditable(false);
        areaInformacoes.setEditable(false);
    }

    public JTextField getCampoDataNasc() {
        return campoDataNasc;
    }

    public JTextField getCampoNome() {
        return campoNome;
    }

    public JTextField getCampoRaca() {
        return campoRaca;
    }

    public JComboBox getComboEspecie() {
        return comboEspecie;
    }

    public JComboBox getComboSexo() {
        return comboSexo;
    }

    public JTextArea getAreaInformacoes() {
        return areaInformacoes;
    }


}
